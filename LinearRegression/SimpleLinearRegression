  
import matplotlib.pyplot as plt
import pandas as pd
import pylab as pl
import numpy as np
%matplotlib inline


#url  https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/ML0101ENv3/labs/FuelConsumptionCo2.csv

#### Load Data ####
df = pd.read_csv("FuelConsumption.csv")
cdf = df[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_COMB','CO2EMISSIONS']]

# Taking Engine Size as independent Value i.e., X and Dependent value as Co2 Emission i.e., y

X = cdf[['ENGINESIZE']]
y = cdf[['CO2EMISSIONS']]

#### Train Test Split ####
'''
Out of Sample Accuracy is the percentage of correct predictions that the model makes on data that that the model has NOT been trained on. Doing a train and test on the same dataset will most likely have low out-of-sample accuracy, due to the likelihood of being over-fit.

It is important that our models have a high, out-of-sample accuracy, because the purpose of any model, of course, is to make correct predictions on unknown data. So how can we improve out-of-sample accuracy? One way is to use an evaluation approach called Train/Test Split. Train/Test Split involves splitting the dataset into training and testing sets respectively, which are mutually exclusive. After which, you train with the training set and test with the testing set.

This will provide a more accurate evaluation on out-of-sample accuracy because the testing dataset is not part of the dataset that have been used to train the data. It is more realistic for real world problems.
Taking seed value = 0  and assigning it into random_state
'''

from sklearn.model_selection import train_test_split
seed = 0
test_size = 1/3
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = test_size, random_state = seed)


#### Fit Simple Linear Regression model to training set ####

'''
We will be using the LinearRegression class from the library sklearn.linear_model. First we create an object of the LinearRegression class and call the fit method passing the X_train and y_train
'''
from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train, y_train)


#### Predict the test set ####

y_pred = regressor.predict(X_test)

#### Visualizing the training set ####

plt.scatter(X_train, y_train, color = 'red')
plt.plot(X_train, regressor.predict(X_train), color = 'blue')
plt.xlabel('Engine Size')
plt.ylabel('Emission')
plt.show()

#### Visualizing the test set ####

plt.scatter(X_test, y_test, color= 'red')
plt.plot(X_train, regressor.predict(X_train), color = 'blue')
plt.xlabel('Engine Size')
plt.ylabel('Emission')
plt.show()

####  Make new predictions ####

new_pred = regressor.predict([[3.6]])
print(new_pred)
